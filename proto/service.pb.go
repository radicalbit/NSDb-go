// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package io_radicalbit_nsdb_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xab, 0x07, 0xc1, 0xe8, 0x8a, 0xc6, 0x3f, 0x87, 0xdc, 0xac, 0xa0, 0x07, 0x35, 0x87,
	0xf9, 0x0d, 0xb6, 0x81, 0x08, 0x73, 0xb8, 0xe6, 0xa2, 0x17, 0x21, 0x4d, 0x5f, 0x68, 0x60, 0x6d,
	0x6a, 0xde, 0x77, 0xd3, 0xaf, 0xe6, 0xa7, 0xf1, 0xab, 0x48, 0x6d, 0xe6, 0x1c, 0xd8, 0x79, 0x6b,
	0x9f, 0xfc, 0xf2, 0xcb, 0xfb, 0x84, 0xb0, 0x1e, 0x82, 0x5f, 0x58, 0x03, 0xb2, 0xf6, 0x8e, 0x1c,
	0x3f, 0xb5, 0x4e, 0x7a, 0x9d, 0x5b, 0xa3, 0x67, 0x99, 0x25, 0x59, 0x61, 0x9e, 0x49, 0x5f, 0x1b,
	0xb1, 0x5f, 0x80, 0x9e, 0x51, 0xd1, 0x52, 0xa2, 0xe7, 0xe1, 0x75, 0x0e, 0x48, 0xe1, 0x37, 0xf6,
	0x80, 0xb5, 0xab, 0x30, 0x48, 0xc4, 0x41, 0x58, 0x56, 0xd3, 0x71, 0x48, 0x8e, 0x43, 0x32, 0x74,
	0x65, 0xa9, 0xab, 0x3c, 0xa4, 0x87, 0xcb, 0x7d, 0x2b, 0xf0, 0x64, 0x19, 0xad, 0x91, 0xfd, 0xcf,
	0x2d, 0x16, 0x4f, 0xd4, 0x68, 0xa0, 0xda, 0x61, 0xd5, 0x74, 0xcc, 0x9f, 0xd9, 0xee, 0x7d, 0x85,
	0xe0, 0x69, 0x60, 0x89, 0x9f, 0xc9, 0xbf, 0xe7, 0x96, 0xe9, 0xe3, 0xb0, 0xa5, 0xc4, 0xe5, 0xbf,
	0x48, 0x0a, 0x38, 0x9f, 0x51, 0x12, 0x71, 0xcf, 0x8e, 0xe0, 0x1d, 0xcc, 0x9c, 0x9a, 0x83, 0x14,
	0x69, 0x82, 0x12, 0x2a, 0xe2, 0x57, 0x5d, 0x06, 0x35, 0x1d, 0xa7, 0xa1, 0xf1, 0x12, 0x16, 0xd7,
	0x1b, 0xe0, 0x1f, 0x2a, 0x0d, 0x65, 0x93, 0xa8, 0xff, 0xb1, 0xcd, 0xf8, 0xaf, 0x86, 0xa1, 0x3e,
	0x7f, 0x61, 0x31, 0x16, 0xee, 0x6d, 0xa2, 0x4b, 0xc0, 0x5a, 0x1b, 0x40, 0x7e, 0xd1, 0x29, 0x5e,
	0xe3, 0x44, 0xd2, 0xc5, 0xad, 0x98, 0x24, 0xe2, 0x4f, 0x6c, 0xaf, 0xf1, 0x3f, 0x00, 0x79, 0x6b,
	0x90, 0x9f, 0x6f, 0x92, 0x07, 0xa8, 0xdb, 0x1c, 0x80, 0x3b, 0xd7, 0x5c, 0xa2, 0x65, 0x71, 0x0e,
	0x68, 0xbc, 0xcd, 0xa0, 0xcd, 0xbb, 0x27, 0x1f, 0xad, 0x71, 0xe2, 0x66, 0xb3, 0x5f, 0x99, 0x02,
	0x4a, 0x9d, 0x36, 0xdf, 0xb0, 0x80, 0x3c, 0x89, 0xb2, 0x9d, 0xef, 0x47, 0x72, 0xfb, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x47, 0x85, 0xff, 0x62, 0xcc, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NSDBServiceSQLClient is the client API for NSDBServiceSQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSDBServiceSQLClient interface {
	InsertBit(ctx context.Context, in *RPCInsert, opts ...grpc.CallOption) (*RPCInsertResult, error)
	ExecuteSQLStatement(ctx context.Context, in *SQLRequestStatement, opts ...grpc.CallOption) (*SQLStatementResponse, error)
}

type nSDBServiceSQLClient struct {
	cc *grpc.ClientConn
}

func NewNSDBServiceSQLClient(cc *grpc.ClientConn) NSDBServiceSQLClient {
	return &nSDBServiceSQLClient{cc}
}

func (c *nSDBServiceSQLClient) InsertBit(ctx context.Context, in *RPCInsert, opts ...grpc.CallOption) (*RPCInsertResult, error) {
	out := new(RPCInsertResult)
	err := c.cc.Invoke(ctx, "/io.radicalbit.nsdb.rpc.NSDBServiceSQL/InsertBit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDBServiceSQLClient) ExecuteSQLStatement(ctx context.Context, in *SQLRequestStatement, opts ...grpc.CallOption) (*SQLStatementResponse, error) {
	out := new(SQLStatementResponse)
	err := c.cc.Invoke(ctx, "/io.radicalbit.nsdb.rpc.NSDBServiceSQL/executeSQLStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSDBServiceSQLServer is the server API for NSDBServiceSQL service.
type NSDBServiceSQLServer interface {
	InsertBit(context.Context, *RPCInsert) (*RPCInsertResult, error)
	ExecuteSQLStatement(context.Context, *SQLRequestStatement) (*SQLStatementResponse, error)
}

// UnimplementedNSDBServiceSQLServer can be embedded to have forward compatible implementations.
type UnimplementedNSDBServiceSQLServer struct {
}

func (*UnimplementedNSDBServiceSQLServer) InsertBit(ctx context.Context, req *RPCInsert) (*RPCInsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBit not implemented")
}
func (*UnimplementedNSDBServiceSQLServer) ExecuteSQLStatement(ctx context.Context, req *SQLRequestStatement) (*SQLStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSQLStatement not implemented")
}

func RegisterNSDBServiceSQLServer(s *grpc.Server, srv NSDBServiceSQLServer) {
	s.RegisterService(&_NSDBServiceSQL_serviceDesc, srv)
}

func _NSDBServiceSQL_InsertBit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCInsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDBServiceSQLServer).InsertBit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.radicalbit.nsdb.rpc.NSDBServiceSQL/InsertBit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDBServiceSQLServer).InsertBit(ctx, req.(*RPCInsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDBServiceSQL_ExecuteSQLStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLRequestStatement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDBServiceSQLServer).ExecuteSQLStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.radicalbit.nsdb.rpc.NSDBServiceSQL/ExecuteSQLStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDBServiceSQLServer).ExecuteSQLStatement(ctx, req.(*SQLRequestStatement))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSDBServiceSQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.radicalbit.nsdb.rpc.NSDBServiceSQL",
	HandlerType: (*NSDBServiceSQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertBit",
			Handler:    _NSDBServiceSQL_InsertBit_Handler,
		},
		{
			MethodName: "executeSQLStatement",
			Handler:    _NSDBServiceSQL_ExecuteSQLStatement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NSDBServiceCommandClient is the client API for NSDBServiceCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSDBServiceCommandClient interface {
	ShowNamespaces(ctx context.Context, in *ShowNamespaces, opts ...grpc.CallOption) (*Namespaces, error)
	ShowMetrics(ctx context.Context, in *ShowMetrics, opts ...grpc.CallOption) (*MetricsGot, error)
	DescribeMetric(ctx context.Context, in *DescribeMetric, opts ...grpc.CallOption) (*MetricSchemaRetrieved, error)
}

type nSDBServiceCommandClient struct {
	cc *grpc.ClientConn
}

func NewNSDBServiceCommandClient(cc *grpc.ClientConn) NSDBServiceCommandClient {
	return &nSDBServiceCommandClient{cc}
}

func (c *nSDBServiceCommandClient) ShowNamespaces(ctx context.Context, in *ShowNamespaces, opts ...grpc.CallOption) (*Namespaces, error) {
	out := new(Namespaces)
	err := c.cc.Invoke(ctx, "/io.radicalbit.nsdb.rpc.NSDBServiceCommand/showNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDBServiceCommandClient) ShowMetrics(ctx context.Context, in *ShowMetrics, opts ...grpc.CallOption) (*MetricsGot, error) {
	out := new(MetricsGot)
	err := c.cc.Invoke(ctx, "/io.radicalbit.nsdb.rpc.NSDBServiceCommand/showMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDBServiceCommandClient) DescribeMetric(ctx context.Context, in *DescribeMetric, opts ...grpc.CallOption) (*MetricSchemaRetrieved, error) {
	out := new(MetricSchemaRetrieved)
	err := c.cc.Invoke(ctx, "/io.radicalbit.nsdb.rpc.NSDBServiceCommand/describeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSDBServiceCommandServer is the server API for NSDBServiceCommand service.
type NSDBServiceCommandServer interface {
	ShowNamespaces(context.Context, *ShowNamespaces) (*Namespaces, error)
	ShowMetrics(context.Context, *ShowMetrics) (*MetricsGot, error)
	DescribeMetric(context.Context, *DescribeMetric) (*MetricSchemaRetrieved, error)
}

// UnimplementedNSDBServiceCommandServer can be embedded to have forward compatible implementations.
type UnimplementedNSDBServiceCommandServer struct {
}

func (*UnimplementedNSDBServiceCommandServer) ShowNamespaces(ctx context.Context, req *ShowNamespaces) (*Namespaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowNamespaces not implemented")
}
func (*UnimplementedNSDBServiceCommandServer) ShowMetrics(ctx context.Context, req *ShowMetrics) (*MetricsGot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMetrics not implemented")
}
func (*UnimplementedNSDBServiceCommandServer) DescribeMetric(ctx context.Context, req *DescribeMetric) (*MetricSchemaRetrieved, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMetric not implemented")
}

func RegisterNSDBServiceCommandServer(s *grpc.Server, srv NSDBServiceCommandServer) {
	s.RegisterService(&_NSDBServiceCommand_serviceDesc, srv)
}

func _NSDBServiceCommand_ShowNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowNamespaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDBServiceCommandServer).ShowNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.radicalbit.nsdb.rpc.NSDBServiceCommand/ShowNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDBServiceCommandServer).ShowNamespaces(ctx, req.(*ShowNamespaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDBServiceCommand_ShowMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDBServiceCommandServer).ShowMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.radicalbit.nsdb.rpc.NSDBServiceCommand/ShowMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDBServiceCommandServer).ShowMetrics(ctx, req.(*ShowMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDBServiceCommand_DescribeMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDBServiceCommandServer).DescribeMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.radicalbit.nsdb.rpc.NSDBServiceCommand/DescribeMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDBServiceCommandServer).DescribeMetric(ctx, req.(*DescribeMetric))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSDBServiceCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.radicalbit.nsdb.rpc.NSDBServiceCommand",
	HandlerType: (*NSDBServiceCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "showNamespaces",
			Handler:    _NSDBServiceCommand_ShowNamespaces_Handler,
		},
		{
			MethodName: "showMetrics",
			Handler:    _NSDBServiceCommand_ShowMetrics_Handler,
		},
		{
			MethodName: "describeMetric",
			Handler:    _NSDBServiceCommand_DescribeMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
